"use strict";

function _classCallCheck(t, e) {
	if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
}
var _createClass = function () {
		function t(t, e) {
			for (var i = 0; i < e.length; i++) {
				var s = e[i];
				s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s)
			}
		}
		return function (e, i, s) {
			return i && t(e.prototype, i), s && t(e, s), e
		}
	}(),
	Barrage = function () {
		function t(e) {
			var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 100,
				s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
			_classCallCheck(this, t), this.ctx = e.getContext("2d"), this.width = e.width, this.height = e.height, this.msgs = new Array(i), this.msgStackLength = i, this.fontSize = s, this.intervalId = "", this.isRunning = !1, this.isClose = !1;
			var n = (window.devicePixelRatio || 1) / (this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1);
			this.ratio = n;
			var a = e.width,
				o = e.height;
			e.width = a * n, e.height = o * n, e.style.width = a + "px", e.style.height = o + "px", this.ctx.scale(n, n), this.ctx.font = s + 'px "PingFang SC", "Microsoft JhengHei", "Microsoft YaHei", "sans-serif"', this.ctx.shadowBlur = 4
		}
		return _createClass(t, [{
			key: "_getLimitRandom",
			value: function (t, e) {
				return Math.floor(Math.random() * (e - t) + t)
			}
		}, {
			key: "_getRandomColor",
			value: function () {
				var t = ["00", "33", "66", "99", "cc", "ff"],
					e = t.length;
				return "#" + t[this._getLimitRandom(0, e)] + t[this._getLimitRandom(0, e)] + t[this._getLimitRandom(0, e)]
			}
		}, {
			key: "_draw",
			value: function () {
				var t = this;
				this.isRunning || (this.intervalId = setInterval(function () {
					t.ctx.clearRect(0, 0, t.width, t.height), t.ctx.save();
					for (var e = 0, i = 0; i < t.msgStackLength; i++)
						if (t.msgs[i])
							if (t.isRunning = !0, t.msgs[i].left || "number" == typeof t.msgs[i].left)
								if (t.msgs[i].left < 0 - t.msgs[i].width) t.msgs[i] = null;
								else {
									t.msgs[i].left = t.msgs[i].left - t.msgs[i].speed, t.ctx.shadowColor = t.msgs[i].color, t.ctx.fillStyle = t.msgs[i].color, t.ctx.font = t.ctx.font.replace(/(\d+)(px|em|rem|pt)/g, function (e, i, s) {
										return i * t.ratio + s
									}), t.ctx.fillText(t.msgs[i].text, t.msgs[i].left, t.msgs[i].top), t.ctx.font = t.ctx.font.replace(/(\d+)(px|em|rem|pt)/g, function (e, i, s) {
										return i / t.ratio + s
									});
									var s = t.ctx.measureText(t.msgs[i].text);
									t.msgs[i].width = s.width * t.ratio, t.ctx.restore
								}
					else t.msgs[i].left = t.width, t.msgs[i].top = t.msgs[i].top || t._getLimitRandom(30, t.height - 30), t.msgs[i].speed = t.msgs[i].speed || t._getLimitRandom(0, 2) + parseInt(t.fontSize / 10), t.msgs[i].color = t.msgs[i].color || t._getRandomColor();
					else(e += 1) === t.msgStackLength && (clearInterval(t.intervalId), t.isRunning = !1)
				}, 10))
			}
		}, {
			key: "pushMessage",
			value: function (t) {
				if (!this.isClose) {
					for (var e = 0; e < this.msgStackLength; e++)
						if (!this.msgs[e]) {
							this.msgs[e] = t;
							break
						} this._draw()
				}else{
					console.log("isClose : " + this.isClose);
				}

			}
		}, {
			key: "clear",
			value: function () {
				this.isRunning && (clearInterval(this.intervalId), this.isRunning = !1), this.ctx.clearRect(0, 0, this.width, this.height), this.msgs = this.msgs.map(function (t) {
					return null
				})
			}
		}, {
			key: "close",
			value: function () {
				this.isClose || (this.isClose = !0, this.clear(), clearInterval(this.intervalId))
			}
		}, {
			key: "open",
			value: function () {
				this.isClose = !1, this._draw()
			}
		}]), t
	}();